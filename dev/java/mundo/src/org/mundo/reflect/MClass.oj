/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MundoCore Java.
 *
 * The Initial Developer of the Original Code is Telecooperation Group,
 * Department of Computer Science, Darmstadt University of Technology.
 * Portions created by the Initial Developer are
 * Copyright (C) 2001-2008 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Erwin Aitenbichler
 */

package org.mundo.reflect;

import java.io.IOException;
import java.io.StringReader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/**
 * Objects of this class represent interfaces.
 */
public class MClass extends MMeta
{
  /**
   * Initializes a new interface.
   * @param name  the interface name.
   */
  public MClass(String name)
  {
    this.name = name;
  }
  /**
   * Returns the name of this interface.
   * @return  the interface name.
   */
  public String getName()
  {
    return name;
  }
  /**
   * Sets the package containing this interface.
   */
  public void setPackage(MPackage pkg)
  {
    this.pkg = pkg;
  }
  /**
   * Returns the package containing this interface.
   */
  public MPackage getPackage()
  {
    return pkg;
  }
  /**
   * Adds a field to this class.
   * @param field  the field to add.
   */
  public void addField(MField field)
  {
    field.setMClass(this);
    fields.add(field);
    fieldHash.put(field.getName(), field);
  }
  /**
   * Returns the method with the specified name.
   * @param name  the method name.
   */
  public MField getField(String name)
  {
    return (MField)fieldHash.get(name);
  }
  /**
   * Returns a string representation of this object.
   */
  public String toString()
  {
    StringBuffer sb=new StringBuffer();
    sb.append("class ").append(name).append(" {\n");
#ifdef CFG_JAVA15
    for (MField field : fields)
    {
#else
    for (Iterator iter = fields.iterator(); iter.hasNext();)
    {
      MField field = (MField)iter.next();
#endif
      sb.append(field.toString());
      sb.append("\n");
    }
    sb.append("}");
    return sb.toString();
  }

#ifdef CFG_JAVA15
  public ArrayList<MField> getFields()
#else
  public ArrayList getFields()
#endif
  {
    return fields;
  }

  private MPackage pkg;
  private String name;
#ifdef CFG_JAVA15
  private ArrayList<MField> fields = new ArrayList<MField>();
  private HashMap<String,MField> fieldHash = new HashMap<String,MField>();
#else
  private ArrayList fields = new ArrayList();
  private HashMap fieldHash = new HashMap();
#endif
}
