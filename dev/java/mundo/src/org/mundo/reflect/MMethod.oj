/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MundoCore Java.
 *
 * The Initial Developer of the Original Code is Telecooperation Group,
 * Department of Computer Science, Darmstadt University of Technology.
 * Portions created by the Initial Developer are
 * Copyright (C) 2001-2008 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Erwin Aitenbichler
 */

package org.mundo.reflect;

import java.util.ArrayList;
import org.mundo.rt.TypedMap;

/**
 * Objects of this class represent methods.
 */
public class MMethod extends MMeta
{
  /**
   * Initializes a new method.
   */
  public MMethod(String name)
  {
    this.name=name;
  }
  /**
   * Sets the interface containing this method.
   */
  public void setInterface(MInterface ifc)
  {
    this.ifc=ifc;
  }
  /**
   * Returns the interface containing this method.
   */
  public MInterface getInterface()
  {
    return ifc;
  }
  /**
   * Returns the method name.
   */
  public String getName()
  {
    return name;
  }
  /**
   * Sets the return type.
   */
  public void setReturnType(MType t)
  {
    returnType=t;
  }
  /**
   * Returns the return type.
   */
  public MType getReturnType()
  {
    return returnType;
  }
  /**
   * Adds a parameter to this method.
   */
  public void addParam(MParam p)
  {
    params.add(p);
  }
  /**
   * Returns the parameter list.
   */
#ifdef CFG_JAVA15
  public ArrayList<MParam> getParams()
#else
  public ArrayList getParams()
#endif
  {
    return params;
  }
  /**
   * Returns the parameter type code string representing the parameter list.
   */
  public String getParamTypeCode()
  {
    if (params.size()==0)
      return "";
    StringBuffer sb=new StringBuffer();
    int i, s=params.size();
    for (i=0; i<s; i++)
    {
      sb.append(((MParam)params.get(i)).getType().getCode());
      if (i<s-1)
        sb.append(",");
    }
    return sb.toString();
  }
  /**
   * Returns the type code for the return value.
   */
  public String getReturnTypeCode()
  {
    return returnType.getCode();
  }
  /**
   * Returns a string representation for this object.
   */
  public String toString()
  {
    StringBuffer sb=new StringBuffer();
    sb.append(returnType);
    sb.append(' ');
    sb.append(name);
    sb.append('(');
    int i, s=params.size();
    for (i=0; i<s; i++)
    {
      sb.append(params.get(i));
      if (i<s-1)
        sb.append(", ");
    }
    sb.append(')');
    if (attr!=null)
      sb.append(" ").append(attr.toString());
    return sb.toString();
  }

  private String name;
  private MType returnType;
  private MInterface ifc;
#ifdef CFG_JAVA15
  private ArrayList<MParam> params = new ArrayList<MParam>();
#else
  private ArrayList params = new ArrayList();
#endif
}
