/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MundoCore Java.
 *
 * The Initial Developer of the Original Code is Telecooperation Group,
 * Department of Computer Science, Darmstadt University of Technology.
 * Portions created by the Initial Developer are
 * Copyright (C) 2001-2008 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Erwin Aitenbichler
 */

package org.mundo.reflect;

/**
 * Objects of this class represent parameters.
 * @author Erwin Aitenbichler
 */
public class MParam extends MMeta
{
  /**
   * Describes whether a parameter is input, output, or both.
   */
#ifdef CFG_JAVA15
  public enum Direction
  {
    in,
    out,
    inout
  }
#else
  public static class Direction
  {
    public static final Direction in    = new Direction(0);
    public static final Direction out   = new Direction(1);
    public static final Direction inout = new Direction(2);
    public Direction(int v)
    {
      value = v;
    }
    public boolean equals(Object o)
    {
      if (!(o instanceof Direction))
        return false;
      return value==((Direction)o).value;
    }
    public String toString()
    {
      switch (value)
      {
        case 0: return "in";
        case 1: return "out";
        case 2: return "inout";
      }
      return "<undef>";
    }
    private int value;
  }
#endif

  /**
   * Initializes a new parameter object.
   */
  public MParam(String name, MType type)
  {
    this.name=name;
    this.type=type;
  }
  /**
   * Initializes a new parameter object.
   */
  public MParam(String name, MType type, Direction dir)
  {
    this.name=name;
    this.type=type;
    this.dir=dir;
  }
  /**
   * Returns the parameter name.
   */
  public String getName()
  {
    return name;
  }
  /**
   * Returns the parameter type.
   */
  public MType getType()
  {
    return type;
  }
  /**
   * Returns the parameter direction.
   */
  public Direction getDirection()
  {
    return dir;
  }
  /**
   * Returns a string representation of this object.
   */
  public String toString()
  {
    StringBuffer sb=new StringBuffer();
    sb.append(type.toString()).append(" ").append(name);
    if (dir!=null)
      sb.append(" ").append(dir.toString());
    return sb.toString();
  }
  
  private String name;
  private MType type;
  private Direction dir;
}
