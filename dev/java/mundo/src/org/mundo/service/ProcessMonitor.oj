/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MundoCore Java.
 *
 * The Initial Developer of the Original Code is Telecooperation Group,
 * Department of Computer Science, Darmstadt University of Technology.
 * Portions created by the Initial Developer are
 * Copyright (C) 2001-2008 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Erwin Aitenbichler
 */

package org.mundo.service;

import java.util.ArrayList;
import java.util.Iterator;
import java.io.FileOutputStream;
import java.io.File;
import java.io.IOException;

import org.mundo.annotation.*;
import org.mundo.rt.Mundo;
import org.mundo.rt.Service;
import org.mundo.rt.Session;
import org.mundo.rt.Signal;
import org.mundo.rt.IActivate;
import org.mundo.rt.Logger;
import org.mundo.rt.Blob;
import org.mundo.rt.TypedMap;

/**
 * A service to start and control external operating system processes.
 */
public class ProcessMonitor extends Service implements IProcessMonitor, IConfigure
{
  /**
   * Options to configure ProcessMonitor
   */
  @mcSerialize
  public static class Config implements IActivate
  {
    @mcField(name="channel-name")
    public String channelName;
    @mcField(name="upload-dir",optional=true)
    public String uploadDir;
    @mcField(name="vars")
    public TypedMap vars;
  }

  public ProcessMonitor()
  {
  }
  public void setServiceConfig(Object obj) // IConfigure
  {
    conf=(Config)obj;
    if (conf.vars==null)
      conf.vars=new TypedMap();
    conf.vars.putString("upload-dir", conf.uploadDir);
  }
  public Object getServiceConfig() // IConfigure
  {
    return conf;
  }
  public void init() // Service
  {
    super.init();
    if (conf==null)
    {
      conf=(Config)Mundo.getConfig().getObject("ProcessMonitor", null);
      if (conf==null)
        conf=new Config();
    }
    if (conf.channelName!=null)
    {
      Signal.connect(getSession().subscribe("lan", conf.channelName), this);
      log.fine("listening on "+conf.channelName);
    }
  }
  public IProcess startProcess(String name, String cmdline) // IProcessMonitor
  {
    cmdline=expandVars(cmdline);
    log.fine("startProcess: "+name+": "+cmdline);
    PMProcess proc=new PMProcess(this, name, cmdline);
    DoIProcess doProc=DoIProcess._of(session, proc);
    synchronized(processes)
    {
      processes.add(doProc);
    }
    proc.start();
    return doProc;
  }
  public IProcess findProcess(String name) // IProcessMonitor
  {
    synchronized(processes)
    {
#ifdef CFG_JAVA15
      for (DoIProcess doP : processes)
      {
#else
      for (Iterator iter = processes.iterator(); iter.hasNext();)
      {
        DoIProcess doP = (DoIProcess)iter.next();
#endif
        PMProcess p = (PMProcess)doP._getLocalObject();
        if (p.getName().equals(name))
          return doP;
      }
    }
    return null;
  }
  void processTerminated(PMProcess proc)
  {
    synchronized(processes)
    {
      for (Iterator iter = processes.iterator(); iter.hasNext();)
      {
        DoIProcess doP = (DoIProcess)iter.next();
        PMProcess p = (PMProcess)doP._getLocalObject();
        if (p==proc)
        {
          iter.remove();
          doP._unbind();
          return;
        }
      }
    }
  }
  public boolean uploadFile(String filename, String content) // IProcessMonitor
  {
    // check filename
    int i, l=filename.length();
    for (i=0; i<l; i++)
    {
      char c=filename.charAt(i);
      if (c<32 || c=='\\' || c=='/' || c==':' || c=='*' || c=='?' || c=='\"' ||
          c=='<' || c=='>' || c=='|')
        return false;
    }
    if (conf.uploadDir==null || conf.uploadDir.length()<1)
      return false;
    String dn=conf.uploadDir;
    if (!(dn.endsWith("/") || dn.endsWith("\\")))
      dn+=File.separator;
    dn+=filename;
    log.info("uploading: "+dn);
    try
    {
      FileOutputStream fos=new FileOutputStream(dn);
      fos.write(content.getBytes());
      fos.close();
    }
    catch(IOException x)
    {
      log.exception(x);
      return false;
    }
    return true;
  }
  private boolean isNameChar(char c)
  {
    return Character.isLetter(c) || Character.isDigit(c) || c=='-' || c=='_';
  }
  private String expandVars(String s)
  {
    try
    {
      int start, i;
      for(;;)
      {
        start=s.indexOf('$');
        if (start<0)
          return s;
        i=start+1;
        while (i<s.length() && isNameChar(s.charAt(i)))
          i++;
        s=s.substring(0, start)+
        conf.vars.getString(s.substring(start+1, i))+
        s.substring(i);
      }
    }
    catch(Exception x)
    {
    }
    return s;
  }

  private class Entry
  {
    Entry(PMProcess p, DoIProcess s)
    {
      process=p;
      stub=s;
    }
    public PMProcess process;
    public DoIProcess stub;
  }
  
  private Logger log = Logger.getLogger("org.mundo.service.ProcessMonitor");  
  private Config conf;
#ifdef CFG_JAVA15
  private ArrayList<DoIProcess> processes = new ArrayList<DoIProcess>();
#else
  private ArrayList processes = new ArrayList();
#endif
}
