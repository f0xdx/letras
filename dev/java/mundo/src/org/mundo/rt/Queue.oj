/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MundoCore Java.
 *
 * The Initial Developer of the Original Code is Telecooperation Group,
 * Department of Computer Science, Darmstadt University of Technology.
 * Portions created by the Initial Developer are
 * Copyright (C) 2001-2008 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Erwin Aitenbichler
 */

package org.mundo.rt;

#ifndef CFG_JAVA15
  #define E Object
  #define Iterator_E_ Iterator
#else
  #define Iterator_E_ Iterator<E>
#endif

#ifdef CFG_CLDC
import java.util.Vector;
import java.util.Enumeration;
#else
import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collection;
#endif

/**
 * Implements a first-in-first-out queue. On standard edition and CDC the
 * elements are stored in a <code>LinkedList</code>. On CLDC, the elements
 * are stored in a <code>Vector</code>.
 * 
 * @author Erwin Aitenbichler
 */
public class Queue
#ifdef CFG_JAVA15
<E> implements java.util.Queue<E>
#endif
{
  /**
   * Initializes a new queue.
   */
  public Queue()
  {
  }
  /**
   * Enqueues the specified object.
   * 
   * @param obj the object to enqueue.
   */
  public void enqueue(E obj)
  {
#ifdef CFG_CLDC
    v.addElement(obj);
#else
    ll.addLast(obj);
#endif
  }
  
  /**
   * Enqueues the specified object. This method is compatible with the JDK 1.5
   * syntax
   * 
   * @param obj the object to enqueue
   * @return true if the offer was accepted, false otherwise
   */
  public boolean offer(E obj) {
    try {
      enqueue(obj);
      return true;
    } catch(Exception didntadd) {
      return false;
    }
  }
  
  /**
   * Dequeues an object.
   * 
   * @return the dequeued object.
   * @throws NoSuchElementException if the queue is empty.
   */  
  public E dequeue()
  {
#ifdef CFG_CLDC
    Object obj=v.firstElement();
    v.removeElementAt(0);
    return obj;
#else
    return ll.removeFirst();
#endif
  }
  
  /**
   * Dequeues an object
   * 
   * @return the dequeued object.
   * @throws NoSuchElementException if the queue is empty
   */
  public E remove() {
    return dequeue();
  }
  
  /**
   * Dequeues an object
   * 
   * @return the dequeued object or null if the queue was empty
   */
  public E poll() {
    return isEmpty() ? null : dequeue();
  }
  
  /**
   * Returns the last element in the queue. This is the same element
   * <code>dequeue</code> would return, but <code>peek</code> does not
   * remove the element from the queue.
   * 
   * @return the last element in the queue or null if the queue is empty.
   */  
  public E peek()
  {
    return isEmpty() ? null : element();
  }
  /**
   * Returns the last element in the queue. This is the same element
   * <code>dequeue</code> would return, but <code>peek</code> does not
   * remove the element from the queue.
   * 
   * @return the last element in the queue
   * @throws NoSuchElementException if the queue is empty
   */  
  public E element()
  {
#ifdef CFG_CLDC
    return v.firstElement();
#else
    return ll.getFirst();
#endif
  }
  /**
   * Returns the number of objects in the queue.
   * 
   * @return the number of objects in the queue.
   */
  public int size()
  {
#ifdef CFG_CLDC
    return v.size();
#else
    return ll.size();
#endif
  }
  /**
   * Returns whether the queue is empty.
   * 
   * @return <code>true</code> if the queue is empty; <code>false</code>
   *            otherwise.
   */
  public boolean isEmpty()
  {
#ifdef CFG_CLDC
    return v.isEmpty();
#else
    return ll.isEmpty();
#endif
  }
  /**
   * Clears the queue by removing all elements.
   */
  public void clear()
  {
#ifdef CFG_CLDC
    v.removeAllElements();
#else
    ll.clear();
#endif
  }
  
  /**
   * Returns true if this collection contains the specified element.
   */
  public boolean contains(Object o) {
#ifdef CFG_CLDC
    return v.contains(o);
#else
    return ll.contains(o);
#endif  
  }

  /**
   * Returns true if this collection contains all of the elements in the
   * specified collection.
   */
#ifdef CFG_JAVA15
  public boolean containsAll(Collection<?> c) {
#else
#ifdef CFG_CLDC
  public boolean containsAll(Vector c) {
#else
  public boolean containsAll(Collection c) {
#endif
#endif
#ifdef CFG_CLDC
    for(Enumeration e = c.elements(); e.hasMoreElements(); )
      if(!contains(e.nextElement()))
        return false;
    return true;
#else
    return ll.containsAll(c);
#endif
  }
  
  
  /**
   * Returns an iterator over the elements in the queue. The iterator provides
   * the objects in the order they were enqueued.
   * 
   * @return an iterator over the elements in the queue.
   */
  public Iterator_E_ iterator()
  {
#ifdef CFG_CLDC
    return new QueueIterator(v);
#else
    return ll.iterator();
#endif
  }
  
#ifdef CFG_CLDC
  public static class QueueIterator implements Iterator
  {
    QueueIterator(Vector v)
    {
      e=v.elements();
    }
    /**
     * Returns true if the iteration has more elements.
     */
    public boolean hasNext()
    {
      return e.hasMoreElements();
    }
    /**
     * Returns the next element in the iteration.
     */
    public Object next()
    {
      return e.nextElement();
    }
    /**
     * Removes from the underlying collection the last element returned by the
     * iterator (optional operation).
     */
    public void remove()
    {
      // UnsupportedOperationException not available on CLDC
      throw new IllegalStateException("remove not supported");
    }
    private Enumeration e;
  }
#endif

#ifdef CFG_JAVA15

  // methods that are necessary for java.util.Queue compatibility

  /**
   * Does not work, throws an UnsupportedOperationException
   */
  public boolean add(E o) {
    throw new UnsupportedOperationException();
  }

  /**
   * Does not work, throws an UnsupportedOperationException
   */
  public boolean addAll(Collection<? extends E> c) {
    throw new UnsupportedOperationException();
  }
  
  /**
   * Does not work, throws an UnsupportedOperationException
   */
  public boolean remove(Object o) {
    throw new UnsupportedOperationException();
  }

  /**
   * Does not work, throws an UnsupportedOperationException
   */
  public boolean removeAll(Collection<?> c) {
    throw new UnsupportedOperationException();
  }
  
  /**
   * Does not work, throws an UnsupportedOperationException
   */
  public boolean retainAll(Collection<?> c) {
    throw new UnsupportedOperationException();
  }
  
  /**
   * Returns an array containing all of the elements in this collection.
   */
  public Object[] toArray() {
    return ll.toArray();
  }
  
  /**
   * Returns an array containing all of the elements in this collection; the
   * runtime type of the returned array is that of the specified array.
   */
  public <T> T[] toArray(T[] a) {
    return ll.toArray(a);
  }
  
#endif

#ifdef CFG_CLDC
  private Vector v=new Vector();
#else
#ifdef CFG_JAVA15
  private LinkedList<E> ll=new LinkedList<E>();
#else
  private LinkedList ll=new LinkedList();
#endif
#endif
}
