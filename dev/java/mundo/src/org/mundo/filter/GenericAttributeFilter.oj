/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MundoCore Java.
 *
 * The Initial Developer of the Original Code is Telecooperation Group,
 * Department of Computer Science, Darmstadt University of Technology.
 * Portions created by the Initial Developer are
 * Copyright (C) 2001-2008 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Erwin Aitenbichler
 */

package org.mundo.filter;

import org.mundo.annotation.*;

/**
 * <p><code>GenericAttributeFilter</code> is a generic filter that only implements
 * comparison for equality.</p>
 * @author Erwin Aitenbichler
 */
@mcSerialize
public class GenericAttributeFilter extends AttributeFilter
{
  /**
   * Creates an attribute filter for any <code>Object</code>.
   * This constructor is solely for object deserialization.
   */
  public GenericAttributeFilter()
  {
  }
  /**
   * Creates an attribute filter for any <code>Object</code>.
   * @param op     the operator. Supported operators are <code>OP_EQUAL</code> and
   *               <code>OP_NOT_EQUAL</code>.
   * @param value  the compare value.
   * @throws IllegalArgumentException  if an invalid operator was specified.
   */
  public GenericAttributeFilter(int op, Object value)
  {
    if (op!=OP_EQUAL && op!=OP_NOT_EQUAL)
      throw new IllegalArgumentException("invalid operator");
    this.op=op;
    cv=value;
  }
  /**
   * Tests if the specified attribute matches this attribute filter.
   * @param obj  the attribute to compare with.
   * @return  <code>true</code> if the specified attribute matches this
   *          attribute filter, <code>false</code> otherwise.
   */
  public boolean matches(Object obj)
  {
    boolean b;
    switch (op & MASK_OP)
    {
      case OP_EQUAL:
        if (cv==null)
          b=(cv==obj);
        else
          b=(cv.equals(obj));
        break;
      default:
        throw new IllegalStateException("invalid operator");
    }
    if ((op & OP_NOT)>0)
      b=!b;
    return b;
  }

  public boolean equals(Object o)
  {
    if (!(o instanceof GenericAttributeFilter))
      return false;
    GenericAttributeFilter f=(GenericAttributeFilter)o;
    if (op!=f.op)
      return false;
    if (cv==null && f.cv==null)
      return true;
    if (cv==null)
      return false;
    return cv.equals(f.cv);
  }

  public int hashCode()
  {
    return (op<<16)^(cv!=null ? cv.hashCode() : 0);
  }

  /**
   * Returns the comparison value.
   */
  public Object getValue()
  {
    return cv;
  }
  /**
   * Returns a string representation of this filter.
   */
  public String toString()
  {
    return opToString()+cv;
  }

  @mcField(name="value")
  private Object cv;
}
