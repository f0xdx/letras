/*
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MundoCore Java.
 *
 * The Initial Developer of the Original Code is Telecooperation Group,
 * Department of Computer Science, Darmstadt University of Technology.
 * Portions created by the Initial Developer are
 * Copyright (C) 2001-2008 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Erwin Aitenbichler
 */

package org.mundo.filter;

import org.mundo.annotation.*;

/**
 * <p><code>StringAttributeFilter</code> implements compare operations for
 * <code>String</code> attributes.</p>
 * @author Erwin Aitenbichler
 */
@mcSerialize
public class StringAttributeFilter extends AttributeFilter
{
  /**
   * Creates an attribute filter suitable for <code>String</code>.
   * This constructor is solely for object deserialization.
   */
  public StringAttributeFilter()
  {
  }
  /**
   * Creates an attribute filter suitable for <code>String</code>.
   * @param o  the operator. <code>StringAttributeFilter</code> supports all
   *           operators defined in <code>AttributeFilter</code>.
   * @param v  the compare value.
   */
  public StringAttributeFilter(int o, String v)
  {
    op=o;
    if ((op & OP_IGNORE_CASE)>0)
      cv=v.toLowerCase();
    else
      cv=v;
  }
  /**
   * Tests if the specified attribute matches this attribute filter.
   * @param o  the attribute to compare with.
   * @return  <code>true</code> if the specified attribute matches this
   *          attribute filter, <code>false</code> otherwise.
   */
  public boolean matches(Object o)
  {
    if (!(o instanceof String))
      return false;
    String v=(String)o;
    boolean b;
    switch (op & MASK_OP)
    {
      case OP_EQUAL:
        if ((op & OP_IGNORE_CASE)>0)
          b=v.equalsIgnoreCase(cv);
        else
          b=v.equals(cv);
        break;
      case OP_GREATER:
        if ((op & OP_IGNORE_CASE)>0)
          b=(v.compareToIgnoreCase(cv)>0);
        else
          b=(v.compareTo(cv)>0);
        break;
      case OP_LESS:
        if ((op & OP_IGNORE_CASE)>0)
          b=(v.compareToIgnoreCase(cv)<0);
        else
          b=(v.compareTo(cv)<0);
        break;
      case OP_STARTS:
        if ((op & OP_IGNORE_CASE)>0)
          b=v.toLowerCase().startsWith(cv);
        else
          b=v.startsWith(cv);
        break;
      case OP_ENDS:
        if ((op & OP_IGNORE_CASE)>0)
          b=v.toLowerCase().endsWith(cv);
        else
          b=v.endsWith(cv);
        break;
      case OP_CONTAINS:
        if ((op & OP_IGNORE_CASE)>0)
          b=(v.toLowerCase().indexOf(cv)>=0);
        else
          b=(v.indexOf(cv)>=0);
        break;
      case OP_IGNORE:
        b=true;
        break;
      default:
        throw new IllegalArgumentException("invalid operator");
    }
    if ((op & OP_NOT)>0)
      b=!b;
    return b;
  }

  public boolean equals(Object o)
  {
    if (!(o instanceof StringAttributeFilter))
      return false;
    StringAttributeFilter f=(StringAttributeFilter)o;
    if (op!=f.op)
      return false;
    if (cv==null && f.cv==null)
      return true;
    if (cv==null)
      return false;
    return cv.equals(f.cv);
  }

  public int hashCode()
  {
    return (op<<16)^(cv!=null ? cv.hashCode() : 0);
  }

  /**
   * Returns the comparison value.
   */
  public Object getValue()
  {
    return cv;
  }
  /**
   * Returns the comparison value.
   */
  public String stringValue()
  {
    return cv;
  }
  /**
   * Returns a string representation of this filter.
   */
  public String toString()
  {
    String ops=opToString();
    char c=ops.charAt(0);
    if (c>='a' && c<='z')
      return " "+ops+" \""+cv+"\"";
    return ops+"\""+cv+"\"";
  }

  @mcField(name="value")
  private String cv;
}
